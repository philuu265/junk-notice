buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.5.RELEASE")
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.3.1'
    id 'com.github.kt3k.coveralls' version '2.8.1'
}

group 'philuu'
version '1.0-SNAPSHOT'

allprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'spring-boot'
    apply plugin: 'cobertura'

    cobertura {
        coverageIgnoreTrivial = true
    }


    repositories {
        jcenter()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    dependencies {

        compile "org.springframework.boot:spring-boot-starter-web"
        compile 'org.springframework.security:spring-security-web:4.1.0.RELEASE'
        compile "org.springframework.boot:spring-boot-starter-data-jpa"
        compile "org.springframework.boot:spring-boot-devtools"

        testCompile "junit:junit"
        testCompile 'org.hamcrest:hamcrest-library'
        testCompile 'org.mockito:mockito-core'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}

task stage(type: Copy, dependsOn: [clean, build, subprojects.build]) {
    from subprojects.collect { it.tasks.withType(Jar) }
    into "target"
}

def subCoberturaFiles = subprojects.collect { new File(it.projectDir, '/build/cobertura/cobertura.ser') }

cobertura {
    coverageFormats = [ 'xml', 'html' ]
    coverageSourceDirs = subprojects.sourceSets.main.allSource.srcDirs.flatten()
    coverageMergeDatafiles = subCoberturaFiles
}

test.dependsOn(subprojects.test)